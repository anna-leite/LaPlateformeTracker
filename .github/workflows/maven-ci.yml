# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven and PostgreSQL

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    # 1. Checkout the repository
    - uses: actions/checkout@v4

    # 2. Set up JDK 17 and cache Maven dependencies
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # 3. Install & start PostgresSQL
    - name: Configure PostgreSQL service
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql postgresql-contrib
        sudo service postgresql start
        # show version
        psql --version

        # Create test DB user & database
        sudo -u postgres psql -c "CREATE USER testuser WITH PASSWORD 'testpass';"
        sudo -u postgres psql -c "CREATE DATABASE testdb OWNER testuser;"

    # 4. Apply our schema & seed data
    - name: Apply schema & seed data
      run: |
        psql "postgresql://testuser:testpass@localhost:5432/testdb" -f sql/init-schema.sql
        psql "postgresql://testuser:testpass@localhost:5432/testdb" -f sql/seed-data.sql

    # 5. Build & test with Maven
    - name: Run Maven tests
      env: # env vars can be picked up by test-application.properties
        DB_URL: jdbc:postgresql://localhost:5432/testdb
        DB_USER: testpass
        DB_PASSWORD: testpass
      run: mvn clean verify -B
    
    # 6. Package the application 
    - name: Package artifact 
      run: mvn package -B

    # 7. Upload JAR artifact
    - name: Upload JAR
      uses: actions/upload-artifact@v3
      with:
        name: LaplateformeTracker-jar
        path: target/*.jar

    # 8. Upload test results (JUnit XML) for GitHub UI
    - name: Upload test results
      if: always()
      uses: actios/upload-artifact@v3
      with:
        name: test-results-xml
        pat: target/surefire-reports/*.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
